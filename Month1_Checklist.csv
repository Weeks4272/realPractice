Week,Day,Task,Done?
Week 1,Day 1,"Install: Python 3.11, VS Code, Git, GCC/Clang, GDB. Verify: python --version, pip --version. Create venv and activate. Deliverable: screenshot of 'python --version' & venv activated.",
Week 1,Day 2,"Python refresh: variables, loops, functions, files. Do: write_to_file.py that logs 'Hello, Security + AI' 5 times.",
Week 1,Day 3,"Networking intro: sockets. Build: port_scanner.py (single host, top 100 ports). Deliverable: run against 127.0.0.1.",
Week 1,Day 4,"CLI ergonomics: argparse, logging. Add flags to port_scanner.py: --host, --start-port, --end-port.",
Week 1,Day 5,"Data basics: numpy + pandas. Load csv, compute summary stats. Deliverable: stats.md with min/mean/max.",
Week 1,Day 6,"Mini-project: CSV log parser (regex). Extract IPs, timestamps, and counts from a sample log file.",
Week 1,Day 7,Review day: Document what you built. Clean code and add README in your project folder.,
Week 2,Day 8,"Set up a lab: Install VirtualBox/VMware. Download a security practice VM (e.g., Kali Linux). Keep it isolated (Host-Only network).",
Week 2,Day 9,Packet basics + scapy. Build: packet_sniffer.py capturing localhost traffic. Deliverable: pcap summary (counts by protocol).,
Week 2,Day 10,"Write: simple firewall-like filter (read pcap or live), print/drop based on port list. Dry-run only (no packet injection).",
Week 2,Day 11,File hashing utility: compute SHA-256 for files in a directory to detect changes (integrity check).,
Week 2,Day 12,Automation: write backup script to zip a project folder with timestamp. Deliverable: zip output in /backups.,
Week 2,Day 13,"Documentation day: Create SECURITY_NOTES.md explaining your lab setup, ethics, and how to run tools.",
Week 2,Day 14,Checkpoint: run through all scripts fresh in a new venv. Fix any missing deps. ,
Week 3,Day 15,"Install: Jupyter, scikit-learn, matplotlib. Verify import. Create notebooks/ai_basics.ipynb.",
Week 3,Day 16,Data prep: load sms_spam_sample.csv. Split train/test. Deliverable: shapes + class balance printed.,
Week 3,Day 17,Model 1: Logistic Regression spam classifier. Save model (joblib). Deliverable: accuracy + confusion matrix.,
Week 3,Day 18,Model 2: RandomForest for the same task. Compare with Model 1. Deliverable: brief write-up which is better and why.,
Week 3,Day 19,Tiny time-series task: moving-average on dummy prices CSV. Plot to PNG. Deliverable: prices_ma.png.,
Week 3,Day 20,Packaging: make a CLI script classify_sms.py that loads the saved model and predicts on a text input.,
Week 3,Day 21,"Review day: Create AI_NOTES.md with commands to train, evaluate, and run the CLI.",
Week 4,Day 22,Install C toolchain (if not already). Hello world in C. Deliverable: hello,
Week 4,Day 23,Pointers + arrays: implement dot product (dotprod.c). Compare with Python/Numpy timing (basic).,
Week 4,Day 24,Structs + IO: read simple struct array from file and compute an aggregate.,
Week 4,Day 25,"Debugging: introduce gdb (set breakpoints, inspect variables).",
Week 4,Day 26,Mini-perf: write a naive matrix multiply in C; print timing vs Python nested loops.,
Week 4,Day 27,Wrap-up: summarize C learnings in C_NOTES.md; list when to prefer C/C++ for AI/security tooling.,
Week 4,Day 28,"Capstone for the month: Run your spam CLI, port scanner, sniffer, and C programs in one sitting; fix issues; tag a release.",
